#! /bin/bash
#
###############################################################################
## Inputs ##

## Decide measurement method ##
if [ "$#" -eq 0 ]; then
method="ac"
elif [ "$#" -ne 1 ]; then
echo
echo 'Invalid Arguments'
echo 'Usage: ./run.sh <matlab method>'
echo
echo 'Method options: pc | ac'
echo
exit
elif [ "$1" == "pc" ] || [ "$1" == "ac" ]; then
method="$1"
else
exit
fi

###############################################################################
## Globals ##

sys="mac" # values: linux | mac
ssid_gopro="RADA"
pswrd_gopro="rada4lyfe"

if [ "$sys" == "linux" ]; then
## Repo Location - LINUX
repo="/home/mdweems/Senior Design/repo/"
elif [ "$sys" == "mac" ]; then
## repo location - MAC
repo="/Users/ChristopherAlvarez/Documents/2016-2017/Fall/EE492/matlabCamera/"
fi


if [ "$sys" == "mac" ]; then # ONLY MAC HERE
###############################################################################
## Communicate with RADA ##

# Connect to RADA over Wifi
# TODO

# wait for RADA to send LiDAR data
# then shove it into a csv
#./post

###############################################################################
## Communicate with GoPro ##

# Connect to GoPro over Wifi
networksetup -setairportnetwork en0 $ssid_gopro $pswrd_gopro

# pull list of images from GoPro
curl -i -H "Accept: application/json" -H "Content-Type: application/json" http://10.5.5.9:8080/videos/DCIM/100GOPRO/ > dir.html

# parse list of images into text file
fcat dir.html | sed -n 's/.*\(GOPR0[0-9]*.JPG\).*/\1/p' > imglist.txt

# pull images off the GoPro
# will create a list of files
./get_pic

fi # END MAC SECTION

###############################################################################
## sync data then move to matlab scripts ##

# sync LiDAR data and image filenames and add them to a csv
ls -1v *.JPG > jpg_list
./sync_data

# copy images to matlab dir
if [ "$method" == "pc" ]; then
find . -name \*.JPG -exec cp {} ../../pixelCountMethod/test_images/ \;
rm ../../pixelCountMethod/test_images/temp.JPG

# copy lidar_data.csv to matlab dir
cp ld.csv ../../pixelCountMethod/lidar_data.csv

# cd to matlab dir
cd ../../pixelCountMethod

elif [ "$method" == "ac" ]; then
find . -name \*.JPG -exec cp {} ../../angledCameraMethod/test_images/ \;
rm ../../angledCameraMethod/test_images/temp.JPG

# copy lidar_data.csv to matlab dir
cp ld.csv ../../angledCameraMethod/lidar_data.csv

# cd to matlab dir
cd ../../angledCameraMethod

fi

###############################################################################
## Run Image Analysis ##

echo Running Matlab
if [ "$sys" == "linux" ]; then
# Run Matlab - LINUX
matlab -r "run" # linux run matlab
# -nodisplay -nodesktop
elif [ "$sys" == "mac" ]; then
# Run Matlab - MAC
/Applications/MATLAB_R2014a.app/bin/matlab -r "run" # mac run matlab
fi

###############################################################################
## Store LiDAR data and Images for future reference ##

# current time
now=$(date +"%m_%d__%k_%M")

# move images to new DIR
cd test_images
mkdir $now 2>/dev/null
find . -name \*.JPG -exec mv {} $now \;  2>/dev/null

# move plots to new Dir
if [ "$method" == "pc" ]; then
find . -name \*.png -exec mv {} $now \;  2>/dev/null
fi

# move lidar data to new DIR
mv ../lidar_data.csv $now/lidar_data.csv 2>/dev/null

# copy matlab results to new dir
cp ../results.csv $now/results.csv

# Archive the data directory
tar -czf $now.tar.gz $now
rm -rf $now/

cd ..

###############################################################################
## Finish and Clean up ##

# cd back to script dir
cd ../arduinoCloseLoop/linux_server

# Remove all images from the run
rm *.JPG
touch temp.JPG

## Done ##
###############################################################################